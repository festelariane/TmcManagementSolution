@using Tmc.Admin.Models.Customers
@using Tmc.BLL.Contract.Cards;
@using Tmc.Core.Infrastructure;

@model CustomerListModel
@{
    //ViewBag.Title = "List";
    ViewBag.Title = "List";
    var gridPageSize = 10;
}

<h2>List</h2>


<div id="grid-customers"></div>
<div id="button-panel">

</div>
<div id="customer-deposit-dialog" title="Deposit" style="display:none">
    <input id="deposit-amount" type="number" value="0" min="0" max="100000000" step="1" />
</div>
<div id="customer-withdraw-dialog" title="Withdraw" style="display:none">
    <label for="withdraw-points">Points</label>
    <input id="withdraw-points" type="number" value="0" min="0" max="100000000" step="1" />
    <br />
    <label for="withdraw-reason">Reason</label>
    <textarea id="withdraw-reason" rows="5" style="width:200px;"></textarea>
</div>
<div id="customer-roles-dialog" title="Assign Roles" style="display:none">

</div>

<script type="text/x-kendo-template" id="deposit-row-template">
    <a id="btn-customer-deposit" href="javascript:void(0)" onclick="onCustomerDeposit(#=Id#)">Deposit</a>
    <a id="btn-customer-withdraw" href="javascript:void(0)" onclick="onCustomerWithdraw(#=Id#)">Withdraw</a>
    <a id="btn-customer-deposit" href="@Url.Action("List", "Transaction")/?customerId=#=Id#">Transaction Listing</a>
    <a id="btn-customer-deposit" href="@Url.Action("WithdrawList", "Transaction")/?customerId=#=Id#">Withdraw Transaction Listing</a>
    <a id="btn-customer-withdraw" href="javascript:void(0)" onclick="onAssigningRole(#=Id#)">Assign Roles</a>
</script>

<script type="text/x-kendo-template" id="customer-searchcriteria-toolbar-template">
    <label for="customer-searchcriteria-username">User Name:</label>
    <span class="k-header">
        <input type="text" id="customer-searchcriteria-username" style="width: 150px" class="k-textbox" />
    </span>

    <label for="customer-searchcriteria-usercode">Code:</label>
    <span class="k-header">
        <input type="text" id="customer-searchcriteria-usercode" style="width: 150px" class="k-textbox" />
    </span>
    <a href="javascript:void(0)" class="k-button k-button-icontext" onclick="onSearchCustomer()">Search</a>
</script>

<script>
    function resetSearchCriteriaForm()
    {
        $("#customer-searchcriteria-username").val("");
        $("#customer-searchcriteria-usercode").val("");
    }
    function resetDepositForm()
    {
        $("#deposit-amount").val(0);
    }
    function resetWithdrawForm()
    {
        $("#withdraw-points").val(0);
        $("#withdraw-reason").val("");
    }

        
    function onSearchCustomer()
    {
        var grid = $('#grid-customers').data('kendoGrid');
        grid.dataSource.page(1); //new search. Set page size to 1
        grid.dataSource.read();
    }


    function getSearchCriteria() {
        var criteria = {
                            SearchUserName: $("#customer-searchcriteria-username").val(),
                            SearchUserCode: $("#customer-searchcriteria-usercode").val()
        };
        return criteria;

    }

    $(document).ready(function () {
        $("#customer-deposit-dialog").dialog({
            autoOpen: false, width: 300, height: 200, resizable: false, modal: true,

            close: function()
            {
                resetDepositForm();
            },
            buttons:
            {
                "Deposit": function()
                {
                    var parentDlg = $(this);

                    var customerId = $(this).data('customer-id');
                    var amount = parseInt($("#deposit-amount").val());
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@Url.Action("CustomerDeposit","Transaction")",
                        data: JSON.stringify({"customerId":customerId, "amount":amount}),
                        contentType: 'application/json',
                        dataType: 'json',
                    success: function(data)
                    {
                        parentDlg.dialog("close");
                        if(customerDataSource != null)
                        {
                            customerDataSource.read();
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Error...Please check...');
                        //parentDlg.dialog("close");
                    }
                });
                },
                "Cancel": function () {
                    $(this).dialog("close");
                }
            }
        });
        $("#deposit-amount").kendoNumericTextBox();


        $("#customer-withdraw-dialog").dialog({
            autoOpen: false, width: 300, height: 400, resizable: false, modal: true,

            close: function()
            {
                resetWithdrawForm();
            },
            buttons:
            {
                "Withdraw": function()
                {
                    var parentDlg = $(this);

                    var customerId = $(this).data('customer-id');
                    var points = parseInt($("#withdraw-points").val());
                    var reason = $("#withdraw-reason").val();
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@Url.Action("CustomerWithdraw","Transaction")",
                        data: JSON.stringify({"customerId":customerId, "points":points, "reason":reason}),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function(data)
                    {
                        parentDlg.dialog("close");
                        if(customerDataSource != null)
                        {
                            customerDataSource.read();
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Error...Please check...');
                        //parentDlg.dialog("close");
                    }
                });
    },
                "Cancel": function () {
                    $(this).dialog("close");
                }
    }
        });


        $("#customer-roles-dialog").dialog({
            autoOpen: false, resizable: false, modal: true,
            open: function(evt,ui){
                $(this).html("");
                var customerId = $(this).data('customer-id');
                $(this).load("@Url.Action("ApplyCustomerRoles", "CustomerRole")/?customerId=" + customerId, function(){
                })
            },
            close: function()
            {
            },
            buttons:
            {
                "Assign Roles": function()
                {
                    var parentDlg = $(this);

                    var customerId = $(this).data('customer-id');
                    var points = parseInt($("#withdraw-points").val());
                    var reason = $("#withdraw-reason").val();
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@Url.Action("ApplyCustomerRoles", "CustomerRole")",
                        data: $("#form-apply-customer-role").serialize(),
                    //contentType: 'application/json',
                    //dataType: 'json',
                    success: function(data)
                    {
                        parentDlg.dialog("close");
                        if(customerDataSource != null)
                        {
                            customerDataSource.read();
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(xhr);
                        alert('Error...Please check...');
                    }
                });
    },
                "Cancel": function () {
                    $(this).dialog("close");
                }
    }
    });

            var customerDataSource = new kendo.data.DataSource({
                transport: {
                    read:  {
                        url: "@Html.Raw(Url.Action("List", "Customer"))",
                        type: "POST",
                        dataType: "json",
                        cache: false
                    },
                    update: {
                        url:"@Html.Raw(Url.Action("Edit", "Customer"))",
                        dataType: "json",
                        type: "POST"
                    },
                    destroy: {
                        url:"@Html.Raw(Url.Action("Delete", "Customer"))",
                        dataType: "json",
                        type: "POST"
                    },
                    create: {
                        url:"@Html.Raw(Url.Action("Create", "Customer"))",
                        dataType: "json",
                        type: "POST"
                    },
                    parameterMap: function(options, operation) {
                        if(operation=="read")
                        {
                            return getSearchCriteria();
                        }
                        if (options.models) {
                            return options.models[0];// {model: kendo.stringify(options.models[0])};
                        }
                    }
                },
                batch: true,
                pageSize: 20,
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, type: "string",nullable: true },
                            CardTypeId: { editable: true },
                            CardType:{},
                            CustomerCode:{ editable: false, type:"string"},
                            UserName: { editable: true},
                            FullName: { editable: true},
                            Points: { editable: true, type: "number", validation: { min: 0}},
                            CreatedOnUtc: { editable: false,type: 'date', format: 'dd/MM/yyyy'},
                            UpdatedOnUtc: { editable: false,type: 'date', format: 'dd/MM/yyyy'},
                            LastActivityDateUtc: { editable: false,type: 'date', format: 'dd/MM/yyyy'}
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update") {
                        this.read();
                    }
                }
            });

        $("#grid-customers").kendoGrid({
            dataSource: customerDataSource,
            pageable: true,
            toolbar: [
                {
                    template:kendo.template($("#customer-searchcriteria-toolbar-template").html())
                },
                "create",
                {
                    name: "ExportToExcel",
                    text: "Export All Customers To Excel"
                },
                
                {
                    name:"ResetSearchForm",
                    text:"Reset"
                }
            ],
            columns: [
                {
                    title:"Action",
                    template: kendo.template($("#deposit-row-template").html())
                    //template: '<a id="btn-customer-deposit" href="javascript:void(0)" onclick="onCustomerDeposit(#=Id#)">Deposit</a>'
                },
                { title: "CustomerCode",
                template: '#=CardType.Prefix##=CustomerCode#'
                },
                { field: "UserName", title: "UserName" },
                { field: "FullName", title: "FullName" },
                {
                    field: "CardTypeId",
                    title: "CardType",
                    width: 200,
                    editor: cardTypeDropdownEditor,
                    template:"#: CardType.Name #"
                    //template:kendo.template($("#myTemplate").html())
                },
                { field: "Points", title: "Points"},
                { field: "CreatedOnUtc", title: "CreatedOnUtc",format:"{0:dd-MM-yyyy}"  },
                { field: "UpdatedOnUtc", title: "UpdatedOnUtc" ,format:"{0:dd-MM-yyyy}"},
                { field: "LastActivityDateUtc", title: "LastActivityDateUtc",format:"{0:dd-MM-yyyy}" },
                { command: ["edit", "destroy"], title: "&nbsp;", width: "200px" }],
            editable: "inline",
            edit:function(e)
            {
                if(e.model.isNew())
                {
                    if(allCardTypes.length > 0)
                    {
                        e.model.CardTypeId = allCardTypes[0].Id;
                    }
                }
                else
                {
                    $(e.container).find('input[name="UserName"]').attr("readonly", true);
                }
            }
        });

        $("#grid-customers .k-grid-ExportToExcel").attr("href","@Url.Action("ExportExcelAll", "Customer")").attr("target","_blank");
        $("#grid-customers .k-grid-ResetSearchForm").click(function(){resetSearchCriteriaForm();});
    });




    //Load local datasource - All card types:
    @{
        var cardTypeBiz = EngineContext.Current.Resolve<ICardTypeBiz>();
        var allCardTypes = cardTypeBiz.GetAllCardTypes();
    }

    var allCardTypes = [
        {
            Id: 0,
            Name: "-- Please select --"
        }
        @for (int i = 0; i < allCardTypes.Count; i++)
        {
            <text>,</text>
            var cardType = allCardTypes[i];
            <text>
                {
                    Id: @(cardType.Id),
                    Name: "@cardType.Name"
                }
            </text>
            @*if (i != allCardTypes.Count - 1)
            {
                    <text>,</text>
            }*@
        }
    ];

    function cardTypeDropdownEditor(container, options)
    {
        //$('<input data-bind="value:"' + options.field + '"/>')
        $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:CardTypeId"/>')
            .appendTo(container)
            .kendoDropDownList(
            {
                //dataTextField: "Name",
                //dataValueField: "Id",
                autoBind: false,
                dataSource: allCardTypes
            });
    }

    function onCustomerDeposit(customerId)
    {
        $("#customer-deposit-dialog").data("customer-id",customerId).dialog("open");
    }
    function onCustomerWithdraw(customerId)
    {
        $("#customer-withdraw-dialog").data("customer-id",customerId).dialog("open");
    }
    function onAssigningRole(customerId)
    {
        $("#customer-roles-dialog").data("customer-id",customerId).dialog("open");
    }
</script>
